#+STARTUP: logdone

[[http://viewsourcecode.org/snaptoken/kilo/index.html][Build Your Own Text Editor]] (制作一个文本文件编辑器)

* Setup

- main()
- Compile
- Makefile

* DONE Entering raw mode                                               :kilo:
  CLOSED: [2017-06-10 Sat 17:01]

- 终端默认使用 cannoical mode，在该模式下，用户输入 Enter 时才会把输入
  发给程序 (line-by-line)
- 如果终端被弄乱了，用 reset(1) 重置
- 设置终端的模式： struct termios / tcgetattr / tcsetattr
  - TCSAFLUSH
  - ECHO
  - ICANON, 关闭 canonical mode
  - ISIG, 关闭 C-c 和 C-z
  - IXON, 关闭 C-s 和 C-q
  - IEXTEN，关闭 C-v
  - ICRNL, 把 13 (\r) 映射成 10 (\n)
  - OFOST, 是否把 \n 当成 \r\n 来输出
- C-a 的编号是 1。M-a 的编号为 27 + 97（占 2 bytes），ESC 的编号是 27。
  GUI 的 Emacs 也沿用这个规则：M-a 和 ESC a 效果一样。
- RET 的编号是 13 (\r)，m 是第 13 个字母，所以 C-m 也是 13。所以这两个
  按键，在终端下是无法区分的？
- j 是第 10 个字母，所以 C-j 是 10 (\n)
- 按照规律，C-m 应该是 13，即 '\r'，但终端会把它当作 10 即 '\n'
- C-s 告诉终端不接受输入，C-q 恢复。
- C-z 会悬挂 (suspended) 运行中的程序，输入 fg 能恢复（不是所有的程序都可以）
- C-c 会终止程序
- C-v 会等待你再输入一个 byte
- \n 输出时会被当作 \r\n ('\r' 移动光标至行开头，'\n' 移动到下一行)
- errno, perror

** TODO "\n" 输出时当作 "\r\n"，为什么不是 "\n\r"？

两者的效果不一样，

* DONE Raw input and output                                            :kilo:
  CLOSED: [2017-06-10 Sat 23:10]

** ASCII 字符之间的转换

   ASCII 字符的序号有内在联系，方便转化，以 a 为例

   | C-a             | a                 | A                |
   |-----------------+-------------------+------------------|
   | 1               | 97                | 65               |
   | 0000, 0001      | 0110, 0001        | 0100, 0001       |
   | a AND 0001,1111 | C-a OR 0110, 0000 | a AND 1101, 1111 |

   Control + Char 所得到的结果是把 Char 的第6、7位清掉，C-a 是 1；C-[
   是 17，也是 ESC；C-m 是 13，也是 Enter，也是 \r；C-j 是 10，也是 \n。

** 使用 Escape sequence 控制终端 
   "ESC [" 是一个控制序列，在 C 语言中写作 "\x1b["，可以控制终端格式化、颜色、移动光标、清屏等。

   | Commands | Meaning          | Example                              | Document                                         |
   |----------+------------------+--------------------------------------+--------------------------------------------------|
   | h        | set mode         | ?25h (隐藏光标，Terminal.app 下无效) |                                                  |
   | l        | reset mode       | ?25l (显示光标，Terminal.app 下无效) |                                                  |
   | J        | Erase In Display | 2J (清屏)                            | [[http://vt100.net/docs/vt100-ug/chapter3.html#ED][Digital VT100 User Guide: Programmer Information]] |
   | K        | Erase In Line    | K (清行，从光标处至行结束)           |                                                  |
   | H        | Cursor Position  | H (移动光标至起始位置，即 [1, 1])    |                                                  |
   | B        | Cursor Down      | 999B (把光标移动到最下方)            |                                                  |
   | C        | Cursor Forward   | 999C (把光标移动到最右方)            |                                                  |

** Keys

   | Key       | Code      | Laptop          |
   |-----------+-----------+-----------------|
   | a         | a (97)    |                 |
   | C-a       | (1)       |                 |
   | Page Up   | ESC [ 5 ~ | Fn + <up>[fn:1] |
   | Page Down | ESC [ 6 ~ | Fn + <down>     |
   | <up>      | ESC [ A   |                 |
   | <down>    | ESC [ B   |                 |
   | <right>   | ESC [ C   |                 |
   | <left     | ESC [ D   |                 |
   | RET       | \r (13)   |                 |
   | C-j       | \n (10)   |                 |
   | <home>    | ESC [ 1 ~ | Fn + <left>     |
   | <home>    | ESC [ 7 ~ |                 |
   | <home>    | ESC [ H   |                 |
   | <home>    | ESC O H   |                 |
   | <end>     | ESC [ 4 ~ | Fn + <right>    |
   | <end>     | ESC [ 8 ~ |                 |
   | <end>     | ESC [ F   |                 |
   | <end>     | ESC O F   |                 |
   | <del>     | ESC [ 3 ~ | Fn + Backspace  |


** Mac 按键记法

   | Command | ⌘ |
   | Option  | ⌥ |
   | Control | ⌃ |
   | Shift   | ⇧ |
   
   参考 [[https://support.apple.com/en-us/HT201236][Mac keyboard shortcuts - Apple Support]]

* TODO A text viewer                                                   :kilo:

- read a line from file using getline(3)
- feature test macro

** TODO "./kilo non_exist_file" 退出时为什么终端没能恢复？

* Footnotes

[fn:1] Terminal.app 似乎对 kilo.c 没效果？但其它的程序如 Emacs 是能正常接收到。换成 iTerm.app 却都没问题。
