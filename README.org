#+STARTUP: logdone

[[http://viewsourcecode.org/snaptoken/kilo/index.html][Build Your Own Text Editor]] (制作一个文本文件编辑器)

* Setup

- main()
- Compile
- Makefile

* DONE Entering raw mode                                               :kilo:
  CLOSED: [2017-06-10 Sat 17:01]

- 终端默认使用 cannoical mode，在该模式下，用户输入 Enter 时才会把输入
  发给程序 (line-by-line)
- 如果终端被弄乱了，用 reset(1) 重置
- 设置终端的模式： struct termios / tcgetattr / tcsetattr
  - TCSAFLUSH
  - ECHO
  - ICANON, 关闭 canonical mode
  - ISIG, 关闭 C-c 和 C-z
  - IXON, 关闭 C-s 和 C-q
  - IEXTEN，关闭 C-v
  - ICRNL, 把 13 (\r) 映射成 10 (\n)
  - OFOST, 是否把 \n 当成 \r\n 来输出
- C-a 的编号是 1。M-a 的编号为 27 + 97（占 2 bytes），ESC 的编号是 27。
  GUI 的 Emacs 也沿用这个规则：M-a 和 ESC a 效果一样。
- RET 的编号是 13 (\r)，m 是第 13 个字母，所以 C-m 也是 13。所以这两个
  按键，在终端下是无法区分的？
- j 是第 10 个字母，所以 C-j 是 10 (\n)
- 按照规律，C-m 应该是 13，即 '\r'，但终端会把它当作 10 即 '\n'
- C-s 告诉终端不接受输入，C-q 恢复。
- C-z 会悬挂 (suspended) 运行中的程序，输入 fg 能恢复（不是所有的程序都可以）
- C-c 会终止程序
- C-v 会等待你再输入一个 byte
- \n 输出时会被当作 \r\n ('\r' 移动光标至行开头，'\n' 移动到下一行)
- errno, perror

** TODO "\n" 输出时当作 "\r\n"，为什么不是 "\n\r"？

两者的效果不一样，

* DONE Raw input and output                                            :kilo:
  CLOSED: [2017-06-10 Sat 23:10]

** ASCII 字符之间的转换

   ASCII 字符的序号有内在联系，方便转化，以 a 为例

   | C-a             | a                 | A                |
   |-----------------+-------------------+------------------|
   | 1               | 97                | 65               |
   | 0000, 0001      | 0110, 0001        | 0100, 0001       |
   | a AND 0001,1111 | C-a OR 0110, 0000 | a AND 1101, 1111 |

   Control + Char 所得到的结果是把 Char 的第6、7位清掉，C-a 是 1；C-[
   是 17，也是 ESC；C-m 是 13，也是 Enter，也是 \r；C-j 是 10，也是 \n。

** 使用 Escape sequence 控制终端
   "ESC [" 是一个控制序列，在 C 语言中写作 "\x1b["，可以控制终端格式化、颜色、移动光标、清屏等。

   | Commands | Meaning                  | Example                              | Document                                         |
   |----------+--------------------------+--------------------------------------+--------------------------------------------------|
   | h        | set mode                 | ?25h (隐藏光标，Terminal.app 下无效) |                                                  |
   | l        | reset mode               | ?25l (显示光标，Terminal.app 下无效) |                                                  |
   | J        | Erase In Display         | 2J (清屏)                            | [[http://vt100.net/docs/vt100-ug/chapter3.html#ED][Digital VT100 User Guide: Programmer Information]] |
   | K        | Erase In Line            | K (清行，从光标处至行结束)           |                                                  |
   | H        | Cursor Position          | H (移动光标至起始位置，即 [1, 1])    |                                                  |
   | B        | Cursor Down              | 999B (把光标移动到最下方)            |                                                  |
   | C        | Cursor Forward           | 999C (把光标移动到最右方)            |                                                  |
   | m        | Select Graphic Rendition | 7m (反色), m(恢复)                   | [[http://vt100.net/docs/vt100-ug/chapter3.html#SGR][Digital VT100 User Guide: Programmer Information]] |

** Keys

   | Key       | Code      | Laptop          | Meaning                    |
   |-----------+-----------+-----------------+----------------------------|
   | a         | a (97)    |                 |                            |
   | C-a       | (1)       |                 |                            |
   | Page Up   | ESC [ 5 ~ | Fn + <up>[fn:1] |                            |
   | Page Down | ESC [ 6 ~ | Fn + <down>     |                            |
   | <up>      | ESC [ A   |                 |                            |
   | <down>    | ESC [ B   |                 |                            |
   | <right>   | ESC [ C   |                 |                            |
   | <left     | ESC [ D   |                 |                            |
   | RET       | \r (13)   |                 |                            |
   | C-j       | \n (10)   |                 |                            |
   | <home>    | ESC [ 1 ~ | Fn + <left>     |                            |
   | <home>    | ESC [ 7 ~ |                 |                            |
   | <home>    | ESC [ H   |                 |                            |
   | <home>    | ESC O H   |                 |                            |
   | <end>     | ESC [ 4 ~ | Fn + <right>    |                            |
   | <end>     | ESC [ 8 ~ |                 |                            |
   | <end>     | ESC [ F   |                 |                            |
   | <end>     | ESC O F   |                 |                            |
   | <del>     | ESC [ 3 ~ | Fn + Backspace  |                            |
   | DEL       |           |                 | Delete a char at point     |
   | Backspace | 127       |                 | Delete a char before point |


** Mac 按键记法

   | Command | ⌘ |
   | Option  | ⌥ |
   | Control | ⌃ |
   | Shift   | ⇧ |

   参考 [[https://support.apple.com/en-us/HT201236][Mac keyboard shortcuts - Apple Support]]

* DONE A text viewer                                                   :kilo:
  CLOSED: [2017-06-11 Sun 15:18]

- read a line from file using getline(3)
- feature test macro

** TODO "./kilo non_exist_file" 退出时为什么终端没能恢复？

** TODO KILO_TAB_STOP 的意思不是 1 个 TAB 用 8 个 空格显示？

   而是保证 TAB 显示之后，光标所在列的是 8 的整数倍。我一直没搞明白编辑器中 TAB 的问题。

   E.cx 表示光标在当前行的 byte 数，E.rx 表示光标应该显示的位置。比如一行内容是 "a\t"，如果 cx = 2，那么 rx 就是 8？

   #+BEGIN_SRC C :results output
     #include <stdio.h>
     #include <string.h>
     #include <stdlib.h>

     #define KILO_TAB_STOP 8

     typedef struct erow {
       char *chars;
     } erow;

     int editorRowCxToRx(erow *row, int cx) {
       int rx = 0;
       int j;
       for (j = 0; j < cx; j++) {
         if (row->chars[j] == '\t')
           rx += (KILO_TAB_STOP - 1) - (rx % KILO_TAB_STOP);
         rx++;
       }
       return rx;
     }

     int main() {
       erow r1 = {NULL};
       r1.chars = strdup ("ab\tc\td");
       char *s = r1.chars;
       for (int i = 0; i < strlen(r1.chars); i++) {
         int cx = i;
         int rx = editorRowCxToRx(&r1, cx);
         printf("s = %s, cx = %d, rx = %d\n", s, cx, rx);
       }
       free(s);
       return 0;
     }
   #+END_SRC

   #+RESULTS:
   : s = ab	c	d, cx = 0, rx = 0
   : s = ab	c	d, cx = 1, rx = 1
   : s = ab	c	d, cx = 2, rx = 2
   : s = ab	c	d, cx = 3, rx = 8
   : s = ab	c	d, cx = 4, rx = 9
   : s = ab	c	d, cx = 5, rx = 16

** TODO 描述出这个编辑器目前的工作流？

   - 如何显示？
   - 如何控制光标？
   - 如何处理按键？
   - 如何 Refresh 的？
   - 使用了状态信息？
   - Memory 使用？

   #+BEGIN_QUOTE
   Remember, we only refresh the screen after each keypress.
   #+END_QUOTE

* DONE A text editor                                                   :kilo:
  CLOSED: [2017-06-11 Sun 17:28]

- open/write/ftruncate, for saving file to disk

** TODO 描述出 Backspace 和 Enter 究竟是如何工作的？

   编辑器的各个状态是如何改变的？

* DONE Search                                                          :kilo:
  CLOSED: [2017-06-11 Sun 19:38]

1. 简单搜索：用户输入搜索词后，按 Enter 之后开始搜索；
2. 增量搜索：用户输入的同时开始搜索，用 callback 实现，每次输入后多会
   运行 callback 执行搜索，镖师搜索结果

** TODO 增量搜索时，在搜索结果前后跳转是如何实现的？没完全明白

* TODO Syntax highlight                                                :kilo:

| Code | Color                |
|------+----------------------|
|   34 | Blue                 |
|   31 | Red                  |
|   32 | Green                |
|   33 | Yellow               |
|   34 | Blue                 |
|   35 | Magenta (品红，紫红) |
|   36 | Cyan (青)            |
|      |                      |
|   39 | Default              |

** TODO 搜索之后颜色是如何恢复的？

   "Restore syntax highlighting after search"

* TODO Customize it for myself                                         :kilo:
** TODO Use similiar key bindings like Emacs
   - C-g, cancel current operation
   - C-n/C-p/C-b/C-f/C-a/C-e, move cursor
   - etc
** TODO 如何完全恢复终端原先的状态？

* Footnotes

[fn:1] Terminal.app 似乎对 kilo.c 没效果？但其它的程序如 Emacs 是能正常接收到。换成 iTerm.app 却都没问题。
